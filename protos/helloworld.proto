// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// after any change of this file we should run this script:
// python -m grpc_tools.protoc -I../../protos --python_out=. --grpc_python_out=. ../../protos/helloworld.proto

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // add new rpc
  rpc SayHelloAgain (Person) returns (Person) {}
  
  // add Calculation rps
  rpc Calculation (Factor) returns (Result) {}

  rpc listApplications(ListSoftware) returns (ListSoftwareResp) {}
  
}

message Software {
  string id = 1;
  int64 status = 2;
  int64 type = 3;
  string title = 4;
  string desc = 5;
  string version = 6;
}

message ListSoftware {
  repeated string ids = 1;
  int64 type = 2;
  string clientUUID = 3;
}

message ListSoftwareResp {
  string clientUUID = 1;
  repeated Software SoftwareList = 2;
}


// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

// define new message: 
// for define new message just we should
// add new message here. JUST THAT
// then we should regenerate our application.
message Person{
  string name = 1;
  string family = 2;
  int64 id = 3;
}

message Factor {
  int64 a = 1;
  int64 b = 2;
  int64 c = 3;
}

message Result{
  repeated string x = 1;
}

